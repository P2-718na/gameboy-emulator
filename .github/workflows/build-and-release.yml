name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger only when a tag like v1.0.0 is pushed

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        # macos-13 uses intel-based runner; latest uses arm.
        # Github doesn't like intel...
        os: [ ubuntu-latest, macos-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang ] #cl
        include:
          #          - os: windows-latest
          #            c_compiler: cl
          #            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          #          - os: ubuntu-latest
          #            c_compiler: clang
          #            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          #          - os: windows-latest
          #            c_compiler: gcc
          #          - os: windows-latest
          #            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history, needed for version extraction

      - name: Extract Version from Tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}-$RUNNER_OS" >> $GITHUB_ENV

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install libsfml-dev

      - name: Install dependencies
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install sfml@2
          brew link sfml@2

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Release-Build-${{ env.VERSION }}
          path: build  # Adjust based on your output

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}  # Ensure correct version
          name: Release ${{ env.VERSION }}
          body: "Release notes for version ${{ env.VERSION }}."
          draft: false  # Set to true if you want a draft release first
          prerelease: false  # Change to true if it's a beta version
          files: build/*  # Adjust for binary paths
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
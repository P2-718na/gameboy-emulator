#ifndef GAMEBOY_TYPES_HPP
#define GAMEBOY_TYPES_HPP

#include <cstdint>

#include <utility>
namespace gb {

// This space can be used to define other "universal" types, if needed
// in the future.
using word  = unsigned char;
using dword = uint16_t;
using addr  = uint16_t;

// Todo rename all opcodes with parenthesis as indirect
typedef enum : word {
  // Undefined instructions hard-brick the cpu during fetch.
  UNDEFINED_00 = 0xD3,
  UNDEFINED_01 = 0xE3,
  UNDEFINED_02 = 0xE4,
  UNDEFINED_03 = 0xF4,
  UNDEFINED_04 = 0xDB,
  UNDEFINED_05 = 0xEB,
  UNDEFINED_06 = 0xEC,
  UNDEFINED_07 = 0xFC,
  UNDEFINED_08 = 0xDD,
  UNDEFINED_09 = 0xED,
  UNDEFINED_10 = 0xFD,
  //////////////////////////////////////////////////////////

  // "Miscellaneous" //////////////////////////////////////
  NOP  = 0x00,
  STOP = 0x10,
  HALT = 0x76,
  DI   = 0xF3,
  EI   = 0xFB,
  ////////////////////////////////////////////////////////

  // Bit operations /////////////////////////////////////
  RLCA = 0x07,
  RLA  = 0x17,
  RRCA = 0x0F,
  RRA  = 0x1F,
  CB   = 0xCB,
  ////////////////////////////////////////////////////////

  // 16-bit arithmetic ///////////////////////////////////
  INC_BC     = 0x03,
  INC_DE     = 0x13,
  INC_HL     = 0x23,
  INC_SP     = 0x33,
  DEC_BC     = 0x0B,
  DEC_DE     = 0x1B,
  DEC_HL     = 0x2B,
  DEC_SP     = 0x3B,
  ADD_HL_BC  = 0x09,
  ADD_HL_DE  = 0x19,
  ADD_HL_HL  = 0x29,
  ADD_HL_SP  = 0x39,
  ADD_SP_e   = 0xE8,
  /////////////////////////////////////////////////////////

  // Control flow /////////////////////////////////////////
  JR_e       = 0x18,
  JR_Z_e     = 0x28,
  JR_C_e     = 0x38,
  JR_NZ_e    = 0x20,
  JR_NC_e    = 0x30,
  RET_Z      = 0xC8,
  RET_C      = 0xD8,
  RET_NZ     = 0xC0,
  RET_NC     = 0xD0,
  RET        = 0xC9,
  RETI       = 0xD9,
  JP_nn      = 0xC3,
  JP_Z_nn    = 0XCA,
  JP_C_nn    = 0XDA,
  JP_NZ_nn   = 0xC2,
  JP_NC_nn   = 0xD2,
  JP_HL      = 0xE9,
  CALL_nn    = 0xCD,
  CALL_Z_nn  = 0xCC,
  CALL_C_nn  = 0xDC,
  CALL_NZ_nn = 0xC4,
  CALL_NC_nn = 0xD4,
  RST_0x00   = 0xC7,
  RST_0x10   = 0xD7,
  RST_0x20   = 0xE7,
  RST_0x30   = 0xF7,
  RST_0x08   = 0xCF,
  RST_0x18   = 0xDF,
  RST_0x28   = 0xEF,
  RST_0x38   = 0xFF,
  /////////////////////////////////////////////////

  // 16 bit loads /////////////////////////////////
  LD_inn_SP  = 0x08,
  LD_HL_SPe = 0xF8,
  LD_SP_HL   = 0xF9,
  LD_SP_nn   = 0x31,
  LD_BC_nn   = 0x01,
  LD_DE_nn   = 0x11,
  LD_HL_nn   = 0x21,
  POP_BC     = 0xC1,
  POP_DE     = 0xD1,
  POP_HL     = 0xE1,
  POP_AF     = 0xF1,
  PUSH_BC    = 0xC5,
  PUSH_DE    = 0xD5,
  PUSH_HL    = 0xE5,
  PUSH_AF    = 0xF5,
  //////////////////////////////////////////////////

  // 8 bit loads ///////////////////////////////////
  LD_A_n     = 0x3E,
  LD_B_n     = 0x06,
  LD_C_n     = 0x0E,
  LD_D_n     = 0x16,
  LD_E_n     = 0x1E,
  LD_H_n     = 0x26,
  LD_L_n     = 0x2E,
  LD_iHL_n   = 0x36,
  LD_A_A     = 0x7F,
  LD_A_B     = 0x78,
  LD_A_C     = 0x79,
  LD_A_D     = 0x7A,
  LD_A_E     = 0x7B,
  LD_A_H     = 0x7C,
  LD_A_L     = 0x7D,
  LD_B_A     = 0x47,
  LD_B_B     = 0x40,
  LD_B_C     = 0x41,
  LD_B_D     = 0x42,
  LD_B_E     = 0x43,
  LD_B_H     = 0x44,
  LD_B_L     = 0x45,
  LD_C_A     = 0x4F,
  LD_C_B     = 0x48,
  LD_C_C     = 0x49,
  LD_C_D     = 0x4A,
  LD_C_E     = 0x4B,
  LD_C_H     = 0x4C,
  LD_C_L     = 0x4D,
  LD_D_A     = 0x57,
  LD_D_B     = 0x50,
  LD_D_C     = 0x51,
  LD_D_D     = 0x52,
  LD_D_E     = 0x53,
  LD_D_H     = 0x54,
  LD_D_L     = 0x55,
  LD_E_A     = 0x5F,
  LD_E_B     = 0x58,
  LD_E_C     = 0x59,
  LD_E_D     = 0x5A,
  LD_E_E     = 0x5B,
  LD_E_H     = 0x5C,
  LD_E_L     = 0x5D,
  LD_H_A     = 0x67,
  LD_H_B     = 0x60,
  LD_H_C     = 0x61,
  LD_H_D     = 0x62,
  LD_H_E     = 0x63,
  LD_H_H     = 0x64,
  LD_H_L     = 0x65,
  LD_L_A     = 0x6F,
  LD_L_B     = 0x68,
  LD_L_C     = 0x69,
  LD_L_D     = 0x6A,
  LD_L_E     = 0x6B,
  LD_L_H     = 0x6C,
  LD_L_L     = 0x6D,
  LD_iHL_A   = 0x77,
  LD_iHL_B   = 0x70,
  LD_iHL_C   = 0x71,
  LD_iHL_D   = 0x72,
  LD_iHL_E   = 0x73,
  LD_iHL_H   = 0x74,
  LD_iHL_L   = 0x75,
  LD_A_iHL   = 0x7E,
  LD_B_iHL   = 0x46,
  LD_C_iHL   = 0x4E,
  LD_D_iHL   = 0x56,
  LD_E_iHL   = 0x5E,
  LD_H_iHL   = 0x66,
  LD_L_iHL   = 0x6E,
  LD_iBC_A   = 0x02,
  LD_iDE_A   = 0x12,
  LD_A_iBC   = 0x0A,
  LD_A_iDE   = 0x1A,
  LD_iHLp_A  = 0x22,
  LD_iHLm_A  = 0x32,
  LD_A_iHLp  = 0x2A,
  LD_A_iHLm  = 0x3A,
  LDH_in_A   = 0xE0,
  LDH_A_in   = 0xF0,
  LDH_iC_A   = 0xE2,
  LDH_A_iC   = 0xF2,
  LD_inn_A   = 0xEA,
  LD_A_inn   = 0xFA,
  //////////////////////////////////////////////////


  // 8 bit arithmetic and logic ////////////////////
  INC_A      = 0x3C,
  INC_B      = 0x04,
  INC_C      = 0x0C,
  INC_D      = 0x14,
  INC_E      = 0x1C,
  INC_H      = 0x24,
  INC_L      = 0x2C,
  DEC_A      = 0x3D,
  DEC_B      = 0x05,
  DEC_C      = 0x0D,
  DEC_D      = 0x15,
  DEC_E      = 0x1D,
  DEC_H      = 0x25,
  DEC_L      = 0x2D,
  ADD_A      = 0x87,
  ADD_B      = 0x80,
  ADD_C      = 0x81,
  ADD_D      = 0x82,
  ADD_E      = 0x83,
  ADD_H      = 0x84,
  ADD_L      = 0x85,
  SUB_A      = 0x97,
  SUB_B      = 0x90,
  SUB_C      = 0x91,
  SUB_D      = 0x92,
  SUB_E      = 0x93,
  SUB_H      = 0x94,
  SUB_L      = 0x95,
  AND_A      = 0xA7,
  AND_B      = 0xA0,
  AND_C      = 0xA1,
  AND_D      = 0xA2,
  AND_E      = 0xA3,
  AND_H      = 0xA4,
  AND_L      = 0xA5,
  OR_A       = 0xB7,
  OR_B       = 0xB0,
  OR_C       = 0xB1,
  OR_D       = 0xB2,
  OR_E       = 0xB3,
  OR_H       = 0xB4,
  OR_L       = 0xB5,
  ADC_A      = 0x8F,
  ADC_B      = 0x88,
  ADC_C      = 0x89,
  ADC_D      = 0x8A,
  ADC_E      = 0x8B,
  ADC_H      = 0x8C,
  ADC_L      = 0x8D,
  SBC_A      = 0x9F,
  SBC_B      = 0x98,
  SBC_C      = 0x99,
  SBC_D      = 0x9A,
  SBC_E      = 0x9B,
  SBC_H      = 0x9C,
  SBC_L      = 0x9D,
  XOR_A      = 0xAF,
  XOR_B      = 0xA8,
  XOR_C      = 0xA9,
  XOR_D      = 0xAA,
  XOR_E      = 0xAB,
  XOR_H      = 0xAC,
  XOR_L      = 0xAD,
  CP_A       = 0xBF,
  CP_B       = 0xB8,
  CP_C       = 0xB9,
  CP_D       = 0xBA,
  CP_E       = 0xBB,
  CP_H       = 0xBC,
  CP_L       = 0xBD,
  INC_iHL    = 0x34,
  DEC_iHL    = 0x35,
  ADD_iHL    = 0x86,
  SUB_iHL    = 0x96,
  AND_iHL    = 0xA6,
  OR_iHL     = 0xB6,
  ADC_iHL    = 0x8E,
  SBC_iHL    = 0x9E,
  XOR_iHL    = 0xAE,
  CP_iHL     = 0xBE,
  ADD_n      = 0xC6,
  SUB_n      = 0xD6,
  AND_n      = 0xE6,
  OR_n       = 0xF6,
  ADC_n      = 0xCE,
  SBC_n      = 0xDE,
  XOR_n      = 0xEE,
  CP_n       = 0xFE,
  DAA        = 0x27,
  SCF        = 0x37,
  CPL        = 0x2F,
  CCF        = 0x3F,
  /////////////////////////////////////
} Opcode;

typedef enum : word {
  // Rotations ////////////////////////////
  RLC_A     = 0x07,
  RLC_B     = 0x00,
  RLC_C     = 0x01,
  RLC_D     = 0x02,
  RLC_E     = 0x03,
  RLC_H     = 0x04,
  RLC_L     = 0x05,
  RRC_A     = 0x0F,
  RRC_B     = 0x08,
  RRC_C     = 0x09,
  RRC_D     = 0x0A,
  RRC_E     = 0x0B,
  RRC_H     = 0x0C,
  RRC_L     = 0x0D,
  RLC_iHL   = 0x06,
  RRC_iHL   = 0x0E,
  RL_A      = 0x17,
  RL_B      = 0x10,
  RL_C      = 0x11,
  RL_D      = 0x12,
  RL_E      = 0x13,
  RL_H      = 0x14,
  RL_L      = 0x15,
  RR_A      = 0x1F,
  RR_B      = 0x18,
  RR_C      = 0x19,
  RR_D      = 0x1A,
  RR_E      = 0x1B,
  RR_H      = 0x1C,
  RR_L      = 0x1D,
  RL_iHL    = 0x16,
  RR_iHL    = 0x1E,
  //////////////////////////////////////////////////

  // Shifts /////////////////////////////////////////
  SLA_A      = 0x27,
  SLA_B      = 0x20,
  SLA_C      = 0x21,
  SLA_D      = 0x22,
  SLA_E      = 0x23,
  SLA_H      = 0x24,
  SLA_L      = 0x25,
  SRA_A      = 0x2F,
  SRA_B      = 0x28,
  SRA_C      = 0x29,
  SRA_D      = 0x2A,
  SRA_E      = 0x2B,
  SRA_H      = 0x2C,
  SRA_L      = 0x2D,
  SLA_iHL    = 0x26,
  SRA_iHL    = 0x2E,
  SRL_A      = 0x3F,
  SRL_B      = 0x38,
  SRL_C      = 0x39,
  SRL_D      = 0x3A,
  SRL_E      = 0x3B,
  SRL_H      = 0x3C,
  SRL_L      = 0x3D,
  SRL_iHL    = 0x3E,
  /////////////////////////////////////////////

  // Swap ///////////////////////////////////
  SWAP_A      = 0x37,
  SWAP_B      = 0x30,
  SWAP_C      = 0x31,
  SWAP_D      = 0x32,
  SWAP_E      = 0x33,
  SWAP_H      = 0x34,
  SWAP_L      = 0x35,
  SWAP_iHL     = 0x36,
  //////////////////////////////////////////


  // BIT ///////////////////////////////////////
  BIT_0_A  = 0x47,
  BIT_0_B  = 0x40,
  BIT_0_C  = 0x41,
  BIT_0_D  = 0x42,
  BIT_0_E  = 0x43,
  BIT_0_H  = 0x44,
  BIT_0_L  = 0x45,
  BIT_1_A  = 0x4F,
  BIT_1_B  = 0x48,
  BIT_1_C  = 0x49,
  BIT_1_D  = 0x4A,
  BIT_1_E  = 0x4B,
  BIT_1_H  = 0x4C,
  BIT_1_L  = 0x4D,
  BIT_2_A  = 0x57,
  BIT_2_B  = 0x50,
  BIT_2_C  = 0x51,
  BIT_2_D  = 0x52,
  BIT_2_E  = 0x53,
  BIT_2_H  = 0x54,
  BIT_2_L  = 0x55,
  BIT_3_A  = 0x5F,
  BIT_3_B  = 0x58,
  BIT_3_C  = 0x59,
  BIT_3_D  = 0x5A,
  BIT_3_E  = 0x5B,
  BIT_3_H  = 0x5C,
  BIT_3_L  = 0x5D,
  BIT_4_A  = 0x67,
  BIT_4_B  = 0x60,
  BIT_4_C  = 0x61,
  BIT_4_D  = 0x62,
  BIT_4_E  = 0x63,
  BIT_4_H  = 0x64,
  BIT_4_L  = 0x65,
  BIT_5_A  = 0x6F,
  BIT_5_B  = 0x68,
  BIT_5_C  = 0x69,
  BIT_5_D  = 0x6A,
  BIT_5_E  = 0x6B,
  BIT_5_H  = 0x6C,
  BIT_5_L  = 0x6D,
  BIT_6_A  = 0x77,
  BIT_6_B  = 0x70,
  BIT_6_C  = 0x71,
  BIT_6_D  = 0x72,
  BIT_6_E  = 0x73,
  BIT_6_H  = 0x74,
  BIT_6_L  = 0x75,
  BIT_7_A  = 0x7F,
  BIT_7_B  = 0x78,
  BIT_7_C  = 0x79,
  BIT_7_D  = 0x7A,
  BIT_7_E  = 0x7B,
  BIT_7_H  = 0x7C,
  BIT_7_L  = 0x7D,
  BIT_0_iHL = 0x46,
  BIT_1_iHL = 0x4E,
  BIT_2_iHL = 0x56,
  BIT_3_iHL = 0x5E,
  BIT_4_iHL = 0x66,
  BIT_5_iHL = 0x6E,
  BIT_6_iHL = 0x76,
  BIT_7_iHL = 0x7E,
  /////////////////////////////////////////////

  // Reset bit //////////////////////////////////
  RES_0_A  = 0x87,
  RES_0_B  = 0x80,
  RES_0_C  = 0x81,
  RES_0_D  = 0x82,
  RES_0_E  = 0x83,
  RES_0_H  = 0x84,
  RES_0_L  = 0x85,
  RES_1_A  = 0x8F,
  RES_1_B  = 0x88,
  RES_1_C  = 0x89,
  RES_1_D  = 0x8A,
  RES_1_E  = 0x8B,
  RES_1_H  = 0x8C,
  RES_1_L  = 0x8D,
  RES_2_A  = 0x97,
  RES_2_B  = 0x90,
  RES_2_C  = 0x91,
  RES_2_D  = 0x92,
  RES_2_E  = 0x93,
  RES_2_H  = 0x94,
  RES_2_L  = 0x95,
  RES_3_A  = 0x9F,
  RES_3_B  = 0x98,
  RES_3_C  = 0x99,
  RES_3_D  = 0x9A,
  RES_3_E  = 0x9B,
  RES_3_H  = 0x9C,
  RES_3_L  = 0x9D,
  RES_4_A  = 0xA7,
  RES_4_B  = 0xA0,
  RES_4_C  = 0xA1,
  RES_4_D  = 0xA2,
  RES_4_E  = 0xA3,
  RES_4_H  = 0xA4,
  RES_4_L  = 0xA5,
  RES_5_A  = 0xAF,
  RES_5_B  = 0xA8,
  RES_5_C  = 0xA9,
  RES_5_D  = 0xAA,
  RES_5_E  = 0xAB,
  RES_5_H  = 0xAC,
  RES_5_L  = 0xAD,
  RES_6_A  = 0xB7,
  RES_6_B  = 0xB0,
  RES_6_C  = 0xB1,
  RES_6_D  = 0xB2,
  RES_6_E  = 0xB3,
  RES_6_H  = 0xB4,
  RES_6_L  = 0xB5,
  RES_7_A  = 0xBF,
  RES_7_B  = 0xB8,
  RES_7_C  = 0xB9,
  RES_7_D  = 0xBA,
  RES_7_E  = 0xBB,
  RES_7_H  = 0xBC,
  RES_7_L  = 0xBD,
  RES_0_iHL = 0x86,
  RES_1_iHL = 0x8E,
  RES_2_iHL = 0x96,
  RES_3_iHL = 0x9E,
  RES_4_iHL = 0xA6,
  RES_5_iHL = 0xAE,
  RES_6_iHL = 0xB6,
  RES_7_iHL = 0xBE,
  /////////////////////////////////////

  // Set bit //////////////////////////////////
  SET_0_A  = 0xC7,
  SET_0_B  = 0xC0,
  SET_0_C  = 0xC1,
  SET_0_D  = 0xC2,
  SET_0_E  = 0xC3,
  SET_0_H  = 0xC4,
  SET_0_L  = 0xC5,
  SET_1_A  = 0xCF,
  SET_1_B  = 0xC8,
  SET_1_C  = 0xC9,
  SET_1_D  = 0xCA,
  SET_1_E  = 0xCB,
  SET_1_H  = 0xCC,
  SET_1_L  = 0xCD,
  SET_2_A  = 0xD7,
  SET_2_B  = 0xD0,
  SET_2_C  = 0xD1,
  SET_2_D  = 0xD2,
  SET_2_E  = 0xD3,
  SET_2_H  = 0xD4,
  SET_2_L  = 0xD5,
  SET_3_A  = 0xDF,
  SET_3_B  = 0xD8,
  SET_3_C  = 0xD9,
  SET_3_D  = 0xDA,
  SET_3_E  = 0xDB,
  SET_3_H  = 0xDC,
  SET_3_L  = 0xDD,
  SET_4_A  = 0xE7,
  SET_4_B  = 0xE0,
  SET_4_C  = 0xE1,
  SET_4_D  = 0xE2,
  SET_4_E  = 0xE3,
  SET_4_H  = 0xE4,
  SET_4_L  = 0xE5,
  SET_5_A  = 0xEF,
  SET_5_B  = 0xE8,
  SET_5_C  = 0xE9,
  SET_5_D  = 0xEA,
  SET_5_E  = 0xEB,
  SET_5_H  = 0xEC,
  SET_5_L  = 0xED,
  SET_6_A  = 0xF7,
  SET_6_B  = 0xF0,
  SET_6_C  = 0xF1,
  SET_6_D  = 0xF2,
  SET_6_E  = 0xF3,
  SET_6_H  = 0xF4,
  SET_6_L  = 0xF5,
  SET_7_A  = 0xFF,
  SET_7_B  = 0xF8,
  SET_7_C  = 0xF9,
  SET_7_D  = 0xFA,
  SET_7_E  = 0xFB,
  SET_7_H  = 0xFC,
  SET_7_L  = 0xFD,
  SET_0_iHL = 0xC6,
  SET_1_iHL = 0xCE,
  SET_2_iHL = 0xD6,
  SET_3_iHL = 0xDE,
  SET_4_iHL = 0xE6,
  SET_5_iHL = 0xEE,
  SET_6_iHL = 0xF6,
  SET_7_iHL = 0xFE,
  /////////////////////////////////////
} CBOpcode;

}

#endif  // define GAMEBOY_TYPES_HPP
